{"version":3,"file":"pix-button.spec.js","sourceRoot":"","sources":["../../../src/components/pix-button/pix-button.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;EAC1B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;IACvB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;MACjC,UAAU,EAAE,CAAC,SAAS,CAAC;MACvB,IAAI,EAAE,2BAA2B;KAClC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAUxB,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;IACnC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,CAAC;MACjC,UAAU,EAAE,CAAC,SAAS,CAAC;MACvB,IAAI,EAAE,iFAAiF;KACxF,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAUxB,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { PixButton } from './pix-button';\n\ndescribe('pix-button', () => {\n  it('renders', async () => {\n    const { root } = await newSpecPage({\n      components: [PixButton],\n      html: '<pix-button></pix-button>',\n    });\n    expect(root).toEqualHtml(`\n      <pix-button>\n        <mock:shadow-root>\n          <div>\n          <button class=\"primary\">\n            HelloPix\n          </button>\n          </div>\n        </mock:shadow-root>\n      </pix-button>\n    `);\n  });\n\n  it('renders with values', async () => {\n    const { root } = await newSpecPage({\n      components: [PixButton],\n      html: `<pix-button first=\"Stencil\" last=\"'Don't call me a framework' JS\"></pix-button>`,\n    });\n    expect(root).toEqualHtml(`\n      <pix-button first=\"Stencil\" last=\"'Don't call me a framework' JS\">\n        <mock:shadow-root>\n          <div>\n          <button class=\"primary\">\n            HelloPix Stencil 'Don't call me a framework' JS\n          </button>\n          </div>\n        </mock:shadow-root>\n      </pix-button>\n    `);\n  });\n});\n"]}